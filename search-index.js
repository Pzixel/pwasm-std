var searchIndex = {};
searchIndex["pwasm_std"] = {"doc":"Standard library for parity wasm programs","items":[[3,"Box","pwasm_std","A pointer type for heap allocation.",null,null],[3,"String","","A UTF-8 encoded, growable string.",null,null],[0,"str","","Unicode string slices.",null,null],[3,"EncodeUtf16","pwasm_std::str","An iterator of [`u16`] over the string encoded as UTF-16.",null,null],[5,"from_boxed_utf8_unchecked","","Converts a boxed slice of bytes to a boxed string slice without checking that the string contains valid UTF-8.",null,{"inputs":[{"name":"box"}],"output":{"generics":["str"],"name":"box"}}],[5,"from_utf8_mut","","Converts a mutable slice of bytes to a mutable string slice.",null,null],[5,"from_utf8","","Converts a slice of bytes to a string slice.",null,null],[3,"LinesAny","","Created with the method [`lines_any`].",null,null],[3,"RMatches","","Created with the method [`rmatches`].",null,null],[0,"pattern","","The string Pattern API.",null,null],[8,"Pattern","pwasm_std::str::pattern","A string pattern.",null,null],[16,"Searcher","","Associated searcher for this pattern",0,null],[10,"into_searcher","","Constructs the associated searcher from `self` and the `haystack` to search in.",0,null],[11,"is_contained_in","","Checks whether the pattern matches anywhere in the haystack",0,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[11,"is_prefix_of","","Checks whether the pattern matches at the front of the haystack",0,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[11,"is_suffix_of","","Checks whether the pattern matches at the back of the haystack",0,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[4,"SearchStep","","Result of calling `Searcher::next()` or `ReverseSearcher::next_back()`.",null,null],[13,"Match","","Expresses that a match of the pattern has been found at `haystack[a..b]`.",1,null],[13,"Reject","","Expresses that `haystack[a..b]` has been rejected as a possible match of the pattern.",1,null],[13,"Done","","Expresses that every byte of the haystack has been visited, ending the iteration.",1,null],[8,"Searcher","","A searcher for a string pattern.",null,null],[10,"haystack","","Getter for the underlying string to be searched in",2,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[10,"next","","Performs the next search step starting from the front.",2,{"inputs":[{"name":"self"}],"output":{"name":"searchstep"}}],[11,"next_match","","Find the next `Match` result. See `next()`",2,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_reject","","Find the next `Reject` result. See `next()` and `next_match()`",2,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[8,"ReverseSearcher","","A reverse searcher for a string pattern.",null,null],[10,"next_back","","Performs the next search step starting from the back.",3,{"inputs":[{"name":"self"}],"output":{"name":"searchstep"}}],[11,"next_match_back","","Find the next `Match` result. See `next_back()`",3,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_reject_back","","Find the next `Reject` result. See `next_back()`",3,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[8,"DoubleEndedSearcher","","A marker trait to express that a `ReverseSearcher` can be used for a `DoubleEndedIterator` implementation.",null,null],[3,"CharSearcher","","Associated type for `<char as Pattern<'a>>::Searcher`.",null,null],[3,"CharSliceSearcher","","Associated type for `<&[char] as Pattern<'a>>::Searcher`.",null,null],[3,"CharPredicateSearcher","","Associated type for `<F as Pattern<'a>>::Searcher`.",null,null],[3,"StrSearcher","","Associated type for `<&str as Pattern<'a>>::Searcher`.",null,null],[3,"SplitWhitespace","pwasm_std::str","An iterator over the non-whitespace substrings of a string, separated by any amount of whitespace.",null,null],[3,"Lines","","An iterator over the lines of a string, as string slices.",null,null],[3,"Bytes","","An iterator over the bytes of a string slice.",null,null],[3,"Matches","","Created with the method [`matches`].",null,null],[3,"Split","","Created with the method [`split`].",null,null],[3,"RSplit","","Created with the method [`rsplit`].",null,null],[3,"Utf8Error","","Errors which can occur when attempting to interpret a sequence of [`u8`] as a string.",null,null],[3,"CharIndices","","An iterator over the [`char`]s of a string slice, and their positions.",null,null],[3,"RSplitTerminator","","Created with the method [`rsplit_terminator`].",null,null],[3,"ParseBoolError","","An error returned when parsing a `bool` using [`from_str`] fails",null,null],[5,"from_utf8_unchecked_mut","","Converts a slice of bytes to a string slice without checking that the string contains valid UTF-8; mutable version.",null,null],[3,"RMatchIndices","","Created with the method [`rmatch_indices`].",null,null],[5,"from_utf8_unchecked","","Converts a slice of bytes to a string slice without checking that the string contains valid UTF-8.",null,null],[3,"RSplitN","","Created with the method [`rsplitn`].",null,null],[8,"FromStr","","A trait to abstract the idea of creating a new instance of a type from a string.",null,null],[16,"Err","","The associated error which can be returned from parsing.",4,null],[10,"from_str","","Parses a string `s` to return a value of this type.",4,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[3,"SplitTerminator","","Created with the method [`split_terminator`].",null,null],[3,"MatchIndices","","Created with the method [`match_indices`].",null,null],[3,"Chars","","An iterator over the [`char`]s of a string slice.",null,null],[3,"SplitN","","Created with the method [`splitn`].",null,null],[3,"Vec","pwasm_std","A contiguous growable array type, written `Vec<T>` but pronounced 'vector'.",null,null],[3,"H32","pwasm_std::hash","Unformatted binary data of fixed length.",null,null],[12,"0","","",5,null],[3,"H64","","Unformatted binary data of fixed length.",null,null],[12,"0","","",6,null],[3,"H128","","Unformatted binary data of fixed length.",null,null],[12,"0","","",7,null],[3,"H160","","Unformatted binary data of fixed length.",null,null],[12,"0","","",8,null],[3,"H256","","Unformatted binary data of fixed length.",null,null],[12,"0","","",9,null],[3,"H264","","Unformatted binary data of fixed length.",null,null],[12,"0","","",10,null],[3,"H512","","Unformatted binary data of fixed length.",null,null],[12,"0","","",11,null],[3,"H520","","Unformatted binary data of fixed length.",null,null],[12,"0","","",12,null],[3,"H1024","","Unformatted binary data of fixed length.",null,null],[12,"0","","",13,null],[3,"H2048","","Unformatted binary data of fixed length.",null,null],[12,"0","","",14,null],[6,"Address","","",null,null],[3,"WrappedArgs","pwasm_std","Input data of a contract.",null,null],[3,"WrappedResult","","Writeable handle of execution results.",null,null],[5,"panic_fmt","","Overrides the default panic_fmt",null,null],[5,"parse_args","","Parse decriptor into wrapped args and result.",null,null],[5,"keccak","","Compute keccak hash.",null,{"inputs":[{"name":"t"}],"output":{"name":"h256"}}],[5,"read_u32","","Read u32 using native endianness",null,null],[5,"write_u32","","Write u32 using native endianness",null,null],[5,"write_ptr","","Write ptr using native endianness",null,null],[5,"read_u64","","Read u64 using native endianness",null,null],[5,"write_u64","","Write u64 using native endianness",null,null],[0,"logger","","Logger extensions for pwasm-std",null,null],[5,"debug","pwasm_std::logger","Log debug message to the runtime",null,{"inputs":[{"name":"str"}],"output":null}],[11,"deref","pwasm_std","",15,null],[11,"as_ref","","",15,null],[11,"done","","Finalize writing result into the descriptor",16,{"inputs":[{"name":"self"},{"generics":["u8"],"name":"vec"}],"output":null}],[14,"format","","Creates a `String` using interpolation of runtime expressions.",null,null],[14,"vec","","Creates a [`Vec`] containing the arguments.",null,null],[11,"new","","Allocates memory on the heap and then places `x` into it.",17,{"inputs":[{"name":"t"}],"output":{"name":"box"}}],[11,"from_raw","","Constructs a box from a raw pointer.",17,null],[11,"from_unique","","Constructs a `Box` from a `Unique<T>` pointer.",17,{"inputs":[{"name":"unique"}],"output":{"name":"box"}}],[11,"into_raw","","Consumes the `Box`, returning the wrapped raw pointer.",17,null],[11,"into_unique","","Consumes the `Box`, returning the wrapped pointer as `Unique<T>`.",17,{"inputs":[{"name":"box"}],"output":{"name":"unique"}}],[11,"leak","","Consumes and leaks the `Box`, returning a mutable reference, `&'a mut T`. Here, the lifetime `'a` may be chosen to be `'static`.",17,{"inputs":[{"name":"box"}],"output":{"name":"t"}}],[11,"downcast","","Attempt to downcast the box to a concrete type.",17,{"inputs":[{"name":"self"}],"output":{"generics":["box","box"],"name":"result"}}],[11,"downcast","","Attempt to downcast the box to a concrete type.",17,{"inputs":[{"name":"self"}],"output":{"generics":["box","box"],"name":"result"}}],[11,"clone","pwasm_std::str","",18,{"inputs":[{"name":"self"}],"output":{"name":"rsplit"}}],[11,"clone","","",19,{"inputs":[{"name":"self"}],"output":{"name":"charindices"}}],[11,"clone","pwasm_std::str::pattern","",20,{"inputs":[{"name":"self"}],"output":{"name":"charslicesearcher"}}],[11,"clone","pwasm_std::str","",21,{"inputs":[{"name":"self"}],"output":{"name":"matches"}}],[11,"clone","pwasm_std::str::pattern","",1,{"inputs":[{"name":"self"}],"output":{"name":"searchstep"}}],[11,"clone","pwasm_std::str","",22,{"inputs":[{"name":"self"}],"output":{"name":"linesany"}}],[11,"clone","","",23,{"inputs":[{"name":"self"}],"output":{"name":"bytes"}}],[11,"clone","","",24,{"inputs":[{"name":"self"}],"output":{"name":"matchindices"}}],[11,"clone","","",25,{"inputs":[{"name":"self"}],"output":{"name":"rsplitterminator"}}],[11,"clone","","",26,{"inputs":[{"name":"self"}],"output":{"name":"splitn"}}],[11,"clone","","",27,{"inputs":[{"name":"self"}],"output":{"name":"split"}}],[11,"clone","","",28,{"inputs":[{"name":"self"}],"output":{"name":"rmatchindices"}}],[11,"clone","pwasm_std::str::pattern","",29,{"inputs":[{"name":"self"}],"output":{"name":"strsearcher"}}],[11,"clone","pwasm_std::str","",30,{"inputs":[{"name":"self"}],"output":{"name":"utf8error"}}],[11,"clone","","",31,{"inputs":[{"name":"self"}],"output":{"name":"rmatches"}}],[11,"clone","","",32,{"inputs":[{"name":"self"}],"output":{"name":"rsplitn"}}],[11,"clone","","",33,{"inputs":[{"name":"self"}],"output":{"name":"chars"}}],[11,"clone","pwasm_std::str::pattern","",34,{"inputs":[{"name":"self"}],"output":{"name":"charpredicatesearcher"}}],[11,"clone","pwasm_std::str","",35,{"inputs":[{"name":"self"}],"output":{"name":"splitterminator"}}],[11,"clone","","",36,{"inputs":[{"name":"self"}],"output":{"name":"parseboolerror"}}],[11,"clone","","",37,{"inputs":[{"name":"self"}],"output":{"name":"lines"}}],[11,"clone","pwasm_std::str::pattern","",38,{"inputs":[{"name":"self"}],"output":{"name":"charsearcher"}}],[11,"fmt","pwasm_std::str","",21,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",26,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",27,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",33,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",28,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","pwasm_std::str::pattern","",34,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","pwasm_std::str","",36,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",32,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","pwasm_std::str::pattern","",20,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","pwasm_std::str","",19,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",30,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",37,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",24,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","pwasm_std::str::pattern","",29,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","pwasm_std::str","",22,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","pwasm_std::str::pattern","",38,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","pwasm_std::str","",35,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",25,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",23,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",31,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",18,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"eq","pwasm_std::str::pattern","",1,{"inputs":[{"name":"self"},{"name":"searchstep"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"self"},{"name":"searchstep"}],"output":{"name":"bool"}}],[11,"eq","pwasm_std::str","",30,{"inputs":[{"name":"self"},{"name":"utf8error"}],"output":{"name":"bool"}}],[11,"ne","","",30,{"inputs":[{"name":"self"},{"name":"utf8error"}],"output":{"name":"bool"}}],[11,"eq","","",36,{"inputs":[{"name":"self"},{"name":"parseboolerror"}],"output":{"name":"bool"}}],[11,"ne","","",36,{"inputs":[{"name":"self"},{"name":"parseboolerror"}],"output":{"name":"bool"}}],[11,"next_back","","",31,{"inputs":[{"name":"self"}],"output":{"generics":["str"],"name":"option"}}],[11,"next_back","","",33,{"inputs":[{"name":"self"}],"output":{"generics":["char"],"name":"option"}}],[11,"next_back","","",18,{"inputs":[{"name":"self"}],"output":{"generics":["str"],"name":"option"}}],[11,"next_back","","",24,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","","",19,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","","",27,{"inputs":[{"name":"self"}],"output":{"generics":["str"],"name":"option"}}],[11,"next_back","","",21,{"inputs":[{"name":"self"}],"output":{"generics":["str"],"name":"option"}}],[11,"next_back","","",35,{"inputs":[{"name":"self"}],"output":{"generics":["str"],"name":"option"}}],[11,"next_back","","",28,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","","",22,{"inputs":[{"name":"self"}],"output":{"generics":["str"],"name":"option"}}],[11,"next_back","","",23,{"inputs":[{"name":"self"}],"output":{"generics":["u8"],"name":"option"}}],[11,"rfind","","",23,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"option"}}],[11,"next_back","","",37,{"inputs":[{"name":"self"}],"output":{"generics":["str"],"name":"option"}}],[11,"next_back","","",25,{"inputs":[{"name":"self"}],"output":{"generics":["str"],"name":"option"}}],[11,"next","","",27,{"inputs":[{"name":"self"}],"output":{"generics":["str"],"name":"option"}}],[11,"next","","",32,{"inputs":[{"name":"self"}],"output":{"generics":["str"],"name":"option"}}],[11,"next","","",25,{"inputs":[{"name":"self"}],"output":{"generics":["str"],"name":"option"}}],[11,"next","","",22,{"inputs":[{"name":"self"}],"output":{"generics":["str"],"name":"option"}}],[11,"size_hint","","",22,null],[11,"next","","",23,{"inputs":[{"name":"self"}],"output":{"generics":["u8"],"name":"option"}}],[11,"size_hint","","",23,null],[11,"count","","",23,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"last","","",23,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"nth","","",23,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"all","","",23,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"bool"}}],[11,"any","","",23,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"bool"}}],[11,"find","","",23,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"option"}}],[11,"position","","",23,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"generics":["usize"],"name":"option"}}],[11,"rposition","","",23,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"generics":["usize"],"name":"option"}}],[11,"next","","",31,{"inputs":[{"name":"self"}],"output":{"generics":["str"],"name":"option"}}],[11,"next","","",18,{"inputs":[{"name":"self"}],"output":{"generics":["str"],"name":"option"}}],[11,"next","","",26,{"inputs":[{"name":"self"}],"output":{"generics":["str"],"name":"option"}}],[11,"next","","",19,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"count","","",19,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"size_hint","","",19,null],[11,"last","","",19,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",24,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",37,{"inputs":[{"name":"self"}],"output":{"generics":["str"],"name":"option"}}],[11,"size_hint","","",37,null],[11,"next","","",28,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",33,{"inputs":[{"name":"self"}],"output":{"generics":["char"],"name":"option"}}],[11,"count","","",33,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"size_hint","","",33,null],[11,"last","","",33,{"inputs":[{"name":"self"}],"output":{"generics":["char"],"name":"option"}}],[11,"next","","",35,{"inputs":[{"name":"self"}],"output":{"generics":["str"],"name":"option"}}],[11,"next","","",21,{"inputs":[{"name":"self"}],"output":{"generics":["str"],"name":"option"}}],[11,"len","","",23,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_empty","","",23,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"next_back","pwasm_std::str::pattern","",38,{"inputs":[{"name":"self"}],"output":{"name":"searchstep"}}],[11,"next_match_back","","",38,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","","",34,{"inputs":[{"name":"self"}],"output":{"name":"searchstep"}}],[11,"next_match_back","","",34,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_reject_back","","",34,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","","",20,{"inputs":[{"name":"self"}],"output":{"name":"searchstep"}}],[11,"next_match_back","","",20,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_reject_back","","",20,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","","",29,{"inputs":[{"name":"self"}],"output":{"name":"searchstep"}}],[11,"next_match_back","","",29,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"fmt","pwasm_std::str","",36,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",30,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"haystack","pwasm_std::str::pattern","",38,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"next","","",38,{"inputs":[{"name":"self"}],"output":{"name":"searchstep"}}],[11,"next_match","","",38,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"haystack","","",34,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"next","","",34,{"inputs":[{"name":"self"}],"output":{"name":"searchstep"}}],[11,"next_match","","",34,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_reject","","",34,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"haystack","","",29,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"next","","",29,{"inputs":[{"name":"self"}],"output":{"name":"searchstep"}}],[11,"next_match","","",29,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"haystack","","",20,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"next","","",20,{"inputs":[{"name":"self"}],"output":{"name":"searchstep"}}],[11,"next_match","","",20,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_reject","","",20,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"deref_mut","pwasm_std","",39,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"deref_mut","","",40,null],[11,"deref_mut","","",17,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"fmt","","",17,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",39,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"partial_cmp","","",17,{"inputs":[{"name":"self"},{"name":"box"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",17,{"inputs":[{"name":"self"},{"name":"box"}],"output":{"name":"bool"}}],[11,"le","","",17,{"inputs":[{"name":"self"},{"name":"box"}],"output":{"name":"bool"}}],[11,"ge","","",17,{"inputs":[{"name":"self"},{"name":"box"}],"output":{"name":"bool"}}],[11,"gt","","",17,{"inputs":[{"name":"self"},{"name":"box"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",39,{"inputs":[{"name":"self"},{"name":"string"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",39,{"inputs":[{"name":"self"},{"name":"string"}],"output":{"name":"bool"}}],[11,"le","","",39,{"inputs":[{"name":"self"},{"name":"string"}],"output":{"name":"bool"}}],[11,"gt","","",39,{"inputs":[{"name":"self"},{"name":"string"}],"output":{"name":"bool"}}],[11,"ge","","",39,{"inputs":[{"name":"self"},{"name":"string"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",40,{"inputs":[{"name":"self"},{"name":"vec"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"into_iter","","Creates a consuming iterator, that is, one that moves each value out of the vector (from start to end). The vector cannot be used after calling this.",40,{"inputs":[{"name":"self"}],"output":{"name":"intoiter"}}],[11,"as_mut","","",40,null],[11,"as_mut","","",17,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"as_mut","","",40,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"call_once","","",17,{"inputs":[{"name":"self"},{"name":"a"}],"output":{"name":"r"}}],[11,"call_once","","",17,{"inputs":[{"name":"self"},{"name":"a"}],"output":{"name":"r"}}],[11,"to_string","","",39,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"extend","","",39,null],[11,"extend","","",39,null],[11,"extend","","",39,null],[11,"extend","","",39,null],[11,"extend","","",40,null],[11,"extend","","",40,null],[11,"extend","","",39,null],[11,"borrow_mut","","",17,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"borrow_mut","","",40,null],[11,"fmt","pwasm_std::str","",41,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","pwasm_std","",40,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",17,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",39,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"cmp","","",39,{"inputs":[{"name":"self"},{"name":"string"}],"output":{"name":"ordering"}}],[11,"cmp","","",17,{"inputs":[{"name":"self"},{"name":"box"}],"output":{"name":"ordering"}}],[11,"cmp","","",40,{"inputs":[{"name":"self"},{"name":"vec"}],"output":{"name":"ordering"}}],[11,"clone","","",17,{"inputs":[{"name":"self"}],"output":{"name":"box"}}],[11,"clone","","",17,{"inputs":[{"name":"self"}],"output":{"generics":["str"],"name":"box"}}],[11,"clone","","",39,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"clone_from","","",39,null],[11,"clone","pwasm_std::str","",41,{"inputs":[{"name":"self"}],"output":{"name":"encodeutf16"}}],[11,"clone","pwasm_std","Returns a new box with a `clone()` of this box's contents.",17,{"inputs":[{"name":"self"}],"output":{"name":"box"}}],[11,"clone_from","","Copies `source`'s contents into `self` without creating a new allocation.",17,null],[11,"clone","","",40,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"clone_from","","",40,null],[11,"fmt","","",17,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"drop","","",17,null],[11,"drop","","",40,null],[11,"next","","",17,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",17,null],[11,"nth","","",17,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"next","pwasm_std::str","",41,{"inputs":[{"name":"self"}],"output":{"generics":["u16"],"name":"option"}}],[11,"size_hint","","",41,null],[11,"finish","pwasm_std","",17,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"write","","",17,null],[11,"write_u8","","",17,null],[11,"write_u16","","",17,null],[11,"write_u32","","",17,null],[11,"write_u64","","",17,null],[11,"write_u128","","",17,null],[11,"write_usize","","",17,null],[11,"write_i8","","",17,null],[11,"write_i16","","",17,null],[11,"write_i32","","",17,null],[11,"write_i64","","",17,null],[11,"write_i128","","",17,null],[11,"write_isize","","",17,null],[11,"write_str","","",39,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["error"],"name":"result"}}],[11,"write_char","","",39,{"inputs":[{"name":"self"},{"name":"char"}],"output":{"generics":["error"],"name":"result"}}],[11,"borrow","","",39,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"borrow","","",40,null],[11,"borrow","","",17,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"index","","",40,null],[11,"index","","",39,{"inputs":[{"name":"self"},{"generics":["usize"],"name":"rangetoinclusive"}],"output":{"name":"str"}}],[11,"index","","",40,null],[11,"index","","",39,{"inputs":[{"name":"self"},{"generics":["usize"],"name":"range"}],"output":{"name":"str"}}],[11,"index","","",40,null],[11,"index","","",40,null],[11,"index","","",40,null],[11,"index","","",40,null],[11,"index","","",39,{"inputs":[{"name":"self"},{"generics":["usize"],"name":"rangefrom"}],"output":{"name":"str"}}],[11,"index","","",39,{"inputs":[{"name":"self"},{"generics":["usize"],"name":"rangeto"}],"output":{"name":"str"}}],[11,"index","","",39,{"inputs":[{"name":"self"},{"name":"rangefull"}],"output":{"name":"str"}}],[11,"index","","",39,{"inputs":[{"name":"self"},{"generics":["usize"],"name":"rangeinclusive"}],"output":{"name":"str"}}],[11,"index","","",40,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"t"}}],[11,"index_mut","","",40,null],[11,"index_mut","","",40,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"t"}}],[11,"index_mut","","",39,{"inputs":[{"name":"self"},{"generics":["usize"],"name":"range"}],"output":{"name":"str"}}],[11,"index_mut","","",39,{"inputs":[{"name":"self"},{"generics":["usize"],"name":"rangefrom"}],"output":{"name":"str"}}],[11,"index_mut","","",40,null],[11,"index_mut","","",40,null],[11,"index_mut","","",39,{"inputs":[{"name":"self"},{"generics":["usize"],"name":"rangeinclusive"}],"output":{"name":"str"}}],[11,"index_mut","","",39,{"inputs":[{"name":"self"},{"name":"rangefull"}],"output":{"name":"str"}}],[11,"index_mut","","",39,{"inputs":[{"name":"self"},{"generics":["usize"],"name":"rangetoinclusive"}],"output":{"name":"str"}}],[11,"index_mut","","",40,null],[11,"index_mut","","",39,{"inputs":[{"name":"self"},{"generics":["usize"],"name":"rangeto"}],"output":{"name":"str"}}],[11,"index_mut","","",40,null],[11,"index_mut","","",40,null],[11,"add_assign","","",39,null],[11,"from_str","","",39,{"inputs":[{"name":"str"}],"output":{"generics":["string","parseerror"],"name":"result"}}],[11,"finalize","","",17,{"inputs":[{"name":"intermediatebox"}],"output":{"name":"box"}}],[11,"deref","","",40,null],[11,"deref","","",39,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"deref","","",17,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"from","","",40,null],[11,"from","","",17,{"inputs":[{"generics":["str"],"name":"box"}],"output":{"name":"box"}}],[11,"from","","",40,{"inputs":[{"name":"string"}],"output":{"generics":["u8"],"name":"vec"}}],[11,"from","","",39,{"inputs":[{"generics":["str"],"name":"cow"}],"output":{"name":"string"}}],[11,"from","","",40,{"inputs":[{"name":"binaryheap"}],"output":{"name":"vec"}}],[11,"from","","",17,{"inputs":[{"name":"string"}],"output":{"generics":["str"],"name":"box"}}],[11,"from","","",40,{"inputs":[{"name":"cow"}],"output":{"name":"vec"}}],[11,"from","","",40,{"inputs":[{"name":"str"}],"output":{"generics":["u8"],"name":"vec"}}],[11,"from","","",17,{"inputs":[{"name":"vec"}],"output":{"name":"box"}}],[11,"from","","",40,null],[11,"from","","",39,{"inputs":[{"name":"str"}],"output":{"name":"string"}}],[11,"from","","",17,{"inputs":[{"name":"str"}],"output":{"generics":["str"],"name":"box"}}],[11,"from","","",40,{"inputs":[{"name":"box"}],"output":{"name":"vec"}}],[11,"from","","",17,{"inputs":[{"name":"t"}],"output":{"name":"box"}}],[11,"from","","",39,{"inputs":[{"generics":["str"],"name":"box"}],"output":{"name":"string"}}],[11,"from","","",40,{"inputs":[{"name":"vecdeque"}],"output":{"name":"vec"}}],[11,"from","","",17,null],[11,"default","","",17,{"inputs":[],"output":{"name":"box"}}],[11,"default","","",17,{"inputs":[],"output":{"generics":["str"],"name":"box"}}],[11,"default","","Creates an empty `Vec<T>`.",40,{"inputs":[],"output":{"name":"vec"}}],[11,"default","","Creates an empty `String`.",39,{"inputs":[],"output":{"name":"string"}}],[11,"default","","Creates a `Box<T>`, with the `Default` value for T.",17,{"inputs":[],"output":{"name":"box"}}],[11,"as_ref","","",40,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"as_ref","","",39,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"as_ref","","",39,null],[11,"as_ref","","",17,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"as_ref","","",40,null],[11,"from_iter","","",39,{"inputs":[{"name":"i"}],"output":{"name":"string"}}],[11,"from_iter","","",39,{"inputs":[{"name":"i"}],"output":{"name":"string"}}],[11,"from_iter","","",39,{"inputs":[{"name":"i"}],"output":{"name":"string"}}],[11,"from_iter","","",39,{"inputs":[{"name":"i"}],"output":{"name":"string"}}],[11,"from_iter","","",40,{"inputs":[{"name":"i"}],"output":{"name":"vec"}}],[11,"from_iter","","",39,{"inputs":[{"name":"i"}],"output":{"name":"string"}}],[11,"len","","",17,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_empty","","",17,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"hash","","",39,null],[11,"hash","","",40,null],[11,"hash","","",17,null],[11,"resume","","",17,{"inputs":[{"name":"self"}],"output":{"name":"generatorstate"}}],[11,"add","","",39,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"string"}}],[11,"eq","","",40,null],[11,"ne","","",40,null],[11,"eq","","",40,null],[11,"ne","","",40,null],[11,"eq","","",40,null],[11,"ne","","",40,null],[11,"eq","","",40,null],[11,"ne","","",40,null],[11,"eq","","",40,null],[11,"ne","","",40,null],[11,"eq","","",40,null],[11,"ne","","",40,null],[11,"eq","","",40,null],[11,"ne","","",40,null],[11,"eq","","",40,null],[11,"ne","","",40,null],[11,"eq","","",40,null],[11,"ne","","",40,null],[11,"eq","","",40,null],[11,"ne","","",40,null],[11,"eq","","",40,null],[11,"ne","","",40,null],[11,"eq","","",40,null],[11,"ne","","",40,null],[11,"eq","","",40,null],[11,"ne","","",40,null],[11,"eq","","",40,null],[11,"ne","","",40,null],[11,"eq","","",40,null],[11,"ne","","",40,null],[11,"eq","","",40,null],[11,"ne","","",40,null],[11,"eq","","",40,null],[11,"ne","","",40,null],[11,"eq","","",40,null],[11,"ne","","",40,null],[11,"eq","","",40,null],[11,"ne","","",40,null],[11,"eq","","",40,null],[11,"ne","","",40,null],[11,"eq","","",39,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[11,"ne","","",39,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[11,"eq","","",39,{"inputs":[{"name":"self"},{"name":"string"}],"output":{"name":"bool"}}],[11,"ne","","",39,{"inputs":[{"name":"self"},{"name":"string"}],"output":{"name":"bool"}}],[11,"eq","","",40,null],[11,"ne","","",40,null],[11,"eq","","",40,null],[11,"ne","","",40,null],[11,"eq","","",40,null],[11,"ne","","",40,null],[11,"eq","","",40,null],[11,"ne","","",40,null],[11,"eq","","",40,null],[11,"ne","","",40,null],[11,"eq","","",40,null],[11,"ne","","",40,null],[11,"eq","","",40,null],[11,"ne","","",40,null],[11,"eq","","",40,null],[11,"ne","","",40,null],[11,"eq","","",40,null],[11,"ne","","",40,null],[11,"eq","","",40,null],[11,"ne","","",40,null],[11,"eq","","",40,null],[11,"ne","","",40,null],[11,"eq","","",40,null],[11,"ne","","",40,null],[11,"eq","","",40,null],[11,"ne","","",40,null],[11,"eq","","",40,null],[11,"ne","","",40,null],[11,"eq","","",40,null],[11,"ne","","",40,null],[11,"eq","","",40,null],[11,"ne","","",40,null],[11,"eq","","",40,null],[11,"ne","","",40,null],[11,"eq","","",40,null],[11,"ne","","",40,null],[11,"eq","","",39,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[11,"ne","","",39,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[11,"eq","","",40,{"inputs":[{"name":"self"},{"name":"vec"}],"output":{"name":"bool"}}],[11,"ne","","",40,{"inputs":[{"name":"self"},{"name":"vec"}],"output":{"name":"bool"}}],[11,"eq","","",40,null],[11,"ne","","",40,null],[11,"eq","","",40,null],[11,"ne","","",40,null],[11,"eq","","",40,null],[11,"ne","","",40,null],[11,"eq","","",40,null],[11,"ne","","",40,null],[11,"eq","","",40,null],[11,"ne","","",40,null],[11,"eq","","",40,null],[11,"ne","","",40,null],[11,"eq","","",39,{"inputs":[{"name":"self"},{"name":"cow"}],"output":{"name":"bool"}}],[11,"ne","","",39,{"inputs":[{"name":"self"},{"name":"cow"}],"output":{"name":"bool"}}],[11,"eq","","",40,null],[11,"ne","","",40,null],[11,"eq","","",40,null],[11,"ne","","",40,null],[11,"eq","","",40,null],[11,"ne","","",40,null],[11,"eq","","",40,null],[11,"ne","","",40,null],[11,"eq","","",40,null],[11,"ne","","",40,null],[11,"eq","","",40,null],[11,"ne","","",40,null],[11,"eq","","",40,null],[11,"ne","","",40,null],[11,"eq","","",40,null],[11,"ne","","",40,null],[11,"eq","","",17,{"inputs":[{"name":"self"},{"name":"box"}],"output":{"name":"bool"}}],[11,"ne","","",17,{"inputs":[{"name":"self"},{"name":"box"}],"output":{"name":"bool"}}],[11,"eq","","",40,null],[11,"ne","","",40,null],[11,"eq","","",40,null],[11,"ne","","",40,null],[11,"eq","","",40,null],[11,"ne","","",40,null],[11,"eq","","",40,null],[11,"ne","","",40,null],[11,"eq","","",40,null],[11,"ne","","",40,null],[11,"eq","","",40,null],[11,"ne","","",40,null],[11,"eq","","",40,null],[11,"ne","","",40,null],[11,"eq","","",40,null],[11,"ne","","",40,null],[11,"eq","","",40,null],[11,"ne","","",40,null],[11,"eq","","",40,null],[11,"ne","","",40,null],[11,"eq","","",40,null],[11,"ne","","",40,null],[11,"eq","","",40,null],[11,"ne","","",40,null],[11,"eq","","",40,null],[11,"ne","","",40,null],[11,"eq","","",40,null],[11,"ne","","",40,null],[11,"eq","","",40,null],[11,"ne","","",40,null],[11,"eq","","",40,null],[11,"ne","","",40,null],[11,"next_back","","",17,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"fmt","pwasm_std::str","",42,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"next","","",42,{"inputs":[{"name":"self"}],"output":{"generics":["str"],"name":"option"}}],[11,"clone","","",42,{"inputs":[{"name":"self"}],"output":{"name":"splitwhitespace"}}],[11,"next_back","","",42,{"inputs":[{"name":"self"}],"output":{"generics":["str"],"name":"option"}}],[11,"deref","pwasm_std::hash","",11,null],[11,"deref","","",12,null],[11,"deref","","",7,null],[11,"deref","","",6,null],[11,"deref","","",5,null],[11,"deref","","",10,null],[11,"deref","","",14,null],[11,"deref","","",13,null],[11,"deref","","",8,null],[11,"deref","","",9,null],[11,"bitxor","","",5,null],[11,"bitxor","","",8,null],[11,"bitxor","","",13,null],[11,"bitxor","","",14,null],[11,"bitxor","","",9,null],[11,"bitxor","","",6,null],[11,"bitxor","","",11,null],[11,"bitxor","","",10,null],[11,"bitxor","","",7,null],[11,"bitxor","","",12,null],[11,"cmp","","",9,{"inputs":[{"name":"self"},{"name":"h256"}],"output":{"name":"ordering"}}],[11,"cmp","","",11,{"inputs":[{"name":"self"},{"name":"h512"}],"output":{"name":"ordering"}}],[11,"cmp","","",7,{"inputs":[{"name":"self"},{"name":"h128"}],"output":{"name":"ordering"}}],[11,"cmp","","",10,{"inputs":[{"name":"self"},{"name":"h264"}],"output":{"name":"ordering"}}],[11,"cmp","","",6,{"inputs":[{"name":"self"},{"name":"h64"}],"output":{"name":"ordering"}}],[11,"cmp","","",14,{"inputs":[{"name":"self"},{"name":"h2048"}],"output":{"name":"ordering"}}],[11,"cmp","","",12,{"inputs":[{"name":"self"},{"name":"h520"}],"output":{"name":"ordering"}}],[11,"cmp","","",8,{"inputs":[{"name":"self"},{"name":"h160"}],"output":{"name":"ordering"}}],[11,"cmp","","",13,{"inputs":[{"name":"self"},{"name":"h1024"}],"output":{"name":"ordering"}}],[11,"cmp","","",5,{"inputs":[{"name":"self"},{"name":"h32"}],"output":{"name":"ordering"}}],[11,"from","","",14,null],[11,"from","","",6,null],[11,"from","","",9,null],[11,"from","","",10,{"inputs":[{"name":"u64"}],"output":{"name":"h264"}}],[11,"from","","",9,null],[11,"from","","",11,null],[11,"from","","",6,{"inputs":[{"name":"h256"}],"output":{"name":"h64"}}],[11,"from","","",8,null],[11,"from","","",9,{"inputs":[{"name":"h160"}],"output":{"name":"h256"}}],[11,"from","","",9,{"inputs":[{"name":"u256"}],"output":{"name":"h256"}}],[11,"from","","",14,null],[11,"from","","",14,{"inputs":[{"name":"u64"}],"output":{"name":"h2048"}}],[11,"from","","",12,{"inputs":[{"name":"u64"}],"output":{"name":"h520"}}],[11,"from","","",6,null],[11,"from","","",5,{"inputs":[{"name":"u64"}],"output":{"name":"h32"}}],[11,"from","","",7,{"inputs":[{"name":"u64"}],"output":{"name":"h128"}}],[11,"from","","",13,null],[11,"from","","",13,{"inputs":[{"name":"u64"}],"output":{"name":"h1024"}}],[11,"from","","",10,null],[11,"from","","",8,{"inputs":[{"name":"h256"}],"output":{"name":"h160"}}],[11,"from","","",5,null],[11,"from","","",9,{"inputs":[{"name":"u256"}],"output":{"name":"h256"}}],[11,"from","","",10,null],[11,"from","","",11,{"inputs":[{"name":"u64"}],"output":{"name":"h512"}}],[11,"from","","",8,{"inputs":[{"name":"u64"}],"output":{"name":"h160"}}],[11,"from","","",11,null],[11,"from","","",5,null],[11,"from","","",7,null],[11,"from","","",6,{"inputs":[{"name":"u64"}],"output":{"name":"h64"}}],[11,"from","","",13,null],[11,"from","","",12,null],[11,"from","","",12,null],[11,"from","","",7,null],[11,"from","","",8,null],[11,"from","","",9,{"inputs":[{"name":"u64"}],"output":{"name":"h256"}}],[11,"from","","",9,{"inputs":[{"name":"h160"}],"output":{"name":"h256"}}],[11,"deref_mut","","",7,null],[11,"deref_mut","","",10,null],[11,"deref_mut","","",9,null],[11,"deref_mut","","",6,null],[11,"deref_mut","","",8,null],[11,"deref_mut","","",14,null],[11,"deref_mut","","",13,null],[11,"deref_mut","","",5,null],[11,"deref_mut","","",12,null],[11,"deref_mut","","",11,null],[11,"bitor","","",10,null],[11,"bitor","","",13,null],[11,"bitor","","",11,null],[11,"bitor","","",7,null],[11,"bitor","","",9,null],[11,"bitor","","",6,null],[11,"bitor","","",12,null],[11,"bitor","","",8,null],[11,"bitor","","",5,null],[11,"bitor","","",14,null],[11,"default","","",14,{"inputs":[],"output":{"name":"h2048"}}],[11,"default","","",6,{"inputs":[],"output":{"name":"h64"}}],[11,"default","","",10,{"inputs":[],"output":{"name":"h264"}}],[11,"default","","",7,{"inputs":[],"output":{"name":"h128"}}],[11,"default","","",12,{"inputs":[],"output":{"name":"h520"}}],[11,"default","","",13,{"inputs":[],"output":{"name":"h1024"}}],[11,"default","","",5,{"inputs":[],"output":{"name":"h32"}}],[11,"default","","",9,{"inputs":[],"output":{"name":"h256"}}],[11,"default","","",11,{"inputs":[],"output":{"name":"h512"}}],[11,"default","","",8,{"inputs":[],"output":{"name":"h160"}}],[11,"as_ref","","",7,null],[11,"as_ref","","",5,null],[11,"as_ref","","",11,null],[11,"as_ref","","",8,null],[11,"as_ref","","",13,null],[11,"as_ref","","",9,null],[11,"as_ref","","",6,null],[11,"as_ref","","",14,null],[11,"as_ref","","",10,null],[11,"as_ref","","",12,null],[11,"partial_cmp","","",10,{"inputs":[{"name":"self"},{"name":"h264"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"partial_cmp","","",5,{"inputs":[{"name":"self"},{"name":"h32"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"partial_cmp","","",9,{"inputs":[{"name":"self"},{"name":"h256"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"partial_cmp","","",6,{"inputs":[{"name":"self"},{"name":"h64"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"partial_cmp","","",13,{"inputs":[{"name":"self"},{"name":"h1024"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"partial_cmp","","",14,{"inputs":[{"name":"self"},{"name":"h2048"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"partial_cmp","","",11,{"inputs":[{"name":"self"},{"name":"h512"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"partial_cmp","","",12,{"inputs":[{"name":"self"},{"name":"h520"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"partial_cmp","","",7,{"inputs":[{"name":"self"},{"name":"h128"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"partial_cmp","","",8,{"inputs":[{"name":"self"},{"name":"h160"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"hash","","",5,null],[11,"hash","","",12,null],[11,"hash","","",14,null],[11,"hash","","",9,null],[11,"hash","","",10,null],[11,"hash","","",13,null],[11,"hash","","",6,null],[11,"hash","","",7,null],[11,"hash","","",11,null],[11,"hash","","",8,null],[11,"clone","","",9,{"inputs":[{"name":"self"}],"output":{"name":"h256"}}],[11,"clone","","",14,{"inputs":[{"name":"self"}],"output":{"name":"h2048"}}],[11,"clone","","",10,{"inputs":[{"name":"self"}],"output":{"name":"h264"}}],[11,"clone","","",12,{"inputs":[{"name":"self"}],"output":{"name":"h520"}}],[11,"clone","","",7,{"inputs":[{"name":"self"}],"output":{"name":"h128"}}],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"name":"h32"}}],[11,"clone","","",6,{"inputs":[{"name":"self"}],"output":{"name":"h64"}}],[11,"clone","","",13,{"inputs":[{"name":"self"}],"output":{"name":"h1024"}}],[11,"clone","","",11,{"inputs":[{"name":"self"}],"output":{"name":"h512"}}],[11,"clone","","",8,{"inputs":[{"name":"self"}],"output":{"name":"h160"}}],[11,"as_mut","","",11,null],[11,"as_mut","","",5,null],[11,"as_mut","","",12,null],[11,"as_mut","","",6,null],[11,"as_mut","","",7,null],[11,"as_mut","","",14,null],[11,"as_mut","","",10,null],[11,"as_mut","","",9,null],[11,"as_mut","","",8,null],[11,"as_mut","","",13,null],[11,"bitand","","",7,null],[11,"bitand","","",13,null],[11,"bitand","","",11,null],[11,"bitand","","",14,null],[11,"bitand","","",10,null],[11,"bitand","","",6,null],[11,"bitand","","",9,null],[11,"bitand","","",8,null],[11,"bitand","","",5,null],[11,"bitand","","",12,null],[11,"eq","","",5,{"inputs":[{"name":"self"},{"name":"h32"}],"output":{"name":"bool"}}],[11,"eq","","",6,{"inputs":[{"name":"self"},{"name":"h64"}],"output":{"name":"bool"}}],[11,"eq","","",9,{"inputs":[{"name":"self"},{"name":"h256"}],"output":{"name":"bool"}}],[11,"eq","","",8,{"inputs":[{"name":"self"},{"name":"h160"}],"output":{"name":"bool"}}],[11,"eq","","",13,{"inputs":[{"name":"self"},{"name":"h1024"}],"output":{"name":"bool"}}],[11,"eq","","",7,{"inputs":[{"name":"self"},{"name":"h128"}],"output":{"name":"bool"}}],[11,"eq","","",12,{"inputs":[{"name":"self"},{"name":"h520"}],"output":{"name":"bool"}}],[11,"eq","","",10,{"inputs":[{"name":"self"},{"name":"h264"}],"output":{"name":"bool"}}],[11,"eq","","",14,{"inputs":[{"name":"self"},{"name":"h2048"}],"output":{"name":"bool"}}],[11,"eq","","",11,{"inputs":[{"name":"self"},{"name":"h512"}],"output":{"name":"bool"}}],[11,"index","","",11,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"u8"}}],[11,"index","","",14,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"u8"}}],[11,"index","","",13,null],[11,"index","","",13,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"u8"}}],[11,"index","","",6,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"u8"}}],[11,"index","","",8,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"u8"}}],[11,"index","","",9,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"u8"}}],[11,"index","","",12,null],[11,"index","","",10,null],[11,"index","","",7,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"u8"}}],[11,"index","","",12,null],[11,"index","","",8,null],[11,"index","","",5,null],[11,"index","","",10,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"u8"}}],[11,"index","","",7,null],[11,"index","","",10,null],[11,"index","","",14,null],[11,"index","","",8,null],[11,"index","","",11,null],[11,"index","","",7,null],[11,"index","","",13,null],[11,"index","","",9,null],[11,"index","","",11,null],[11,"index","","",6,null],[11,"index","","",12,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"u8"}}],[11,"index","","",5,null],[11,"index","","",14,null],[11,"index","","",5,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"u8"}}],[11,"index","","",9,null],[11,"index","","",6,null],[11,"index_mut","","",13,null],[11,"index_mut","","",8,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"u8"}}],[11,"index_mut","","",10,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"u8"}}],[11,"index_mut","","",11,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"u8"}}],[11,"index_mut","","",5,null],[11,"index_mut","","",13,null],[11,"index_mut","","",14,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"u8"}}],[11,"index_mut","","",5,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"u8"}}],[11,"index_mut","","",8,null],[11,"index_mut","","",14,null],[11,"index_mut","","",6,null],[11,"index_mut","","",13,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"u8"}}],[11,"index_mut","","",11,null],[11,"index_mut","","",8,null],[11,"index_mut","","",6,null],[11,"index_mut","","",5,null],[11,"index_mut","","",12,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"u8"}}],[11,"index_mut","","",9,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"u8"}}],[11,"index_mut","","",9,null],[11,"index_mut","","",7,null],[11,"index_mut","","",14,null],[11,"index_mut","","",10,null],[11,"index_mut","","",12,null],[11,"index_mut","","",7,null],[11,"index_mut","","",10,null],[11,"index_mut","","",11,null],[11,"index_mut","","",6,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"u8"}}],[11,"index_mut","","",7,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"u8"}}],[11,"index_mut","","",12,null],[11,"index_mut","","",9,null],[11,"new","pwasm_std","Creates a new empty `String`.",39,{"inputs":[],"output":{"name":"string"}}],[11,"with_capacity","","Creates a new empty `String` with a particular capacity.",39,{"inputs":[{"name":"usize"}],"output":{"name":"string"}}],[11,"from_utf8","","Converts a vector of bytes to a `String`.",39,{"inputs":[{"generics":["u8"],"name":"vec"}],"output":{"generics":["string","fromutf8error"],"name":"result"}}],[11,"from_utf8_lossy","","Converts a slice of bytes to a string, including invalid characters.",39,null],[11,"from_utf16","","Decode a UTF-16 encoded vector `v` into a `String`, returning [`Err`] if `v` contains any invalid data.",39,null],[11,"from_utf16_lossy","","Decode a UTF-16 encoded slice `v` into a `String`, replacing invalid data with the replacement character (U+FFFD).",39,null],[11,"from_raw_parts","","Creates a new `String` from a length, capacity, and pointer.",39,null],[11,"from_utf8_unchecked","","Converts a vector of bytes to a `String` without checking that the string contains valid UTF-8.",39,{"inputs":[{"generics":["u8"],"name":"vec"}],"output":{"name":"string"}}],[11,"into_bytes","","Converts a `String` into a byte vector.",39,{"inputs":[{"name":"self"}],"output":{"generics":["u8"],"name":"vec"}}],[11,"as_str","","Extracts a string slice containing the entire string.",39,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"as_mut_str","","Converts a `String` into a mutable string slice.",39,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"push_str","","Appends a given string slice onto the end of this `String`.",39,null],[11,"capacity","","Returns this `String`'s capacity, in bytes.",39,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"reserve","","Ensures that this `String`'s capacity is at least `additional` bytes larger than its length.",39,null],[11,"reserve_exact","","Ensures that this `String`'s capacity is `additional` bytes larger than its length.",39,null],[11,"shrink_to_fit","","Shrinks the capacity of this `String` to match its length.",39,null],[11,"push","","Appends the given [`char`] to the end of this `String`.",39,null],[11,"as_bytes","","Returns a byte slice of this `String`'s contents.",39,null],[11,"truncate","","Shortens this `String` to the specified length.",39,null],[11,"pop","","Removes the last character from the string buffer and returns it.",39,{"inputs":[{"name":"self"}],"output":{"generics":["char"],"name":"option"}}],[11,"remove","","Removes a [`char`] from this `String` at a byte position and returns it.",39,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"char"}}],[11,"retain","","Retains only the characters specified by the predicate.",39,null],[11,"insert","","Inserts a character into this `String` at a byte position.",39,null],[11,"insert_str","","Inserts a string slice into this `String` at a byte position.",39,null],[11,"as_mut_vec","","Returns a mutable reference to the contents of this `String`.",39,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"len","","Returns the length of this `String`, in bytes.",39,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns `true` if this `String` has a length of zero.",39,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"split_off","","Splits the string into two at the given index.",39,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"string"}}],[11,"clear","","Truncates this `String`, removing all contents.",39,null],[11,"drain","","Creates a draining iterator that removes the specified range in the string and yields the removed chars.",39,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"drain"}}],[11,"splice","","Creates a splicing iterator that removes the specified range in the string, and replaces it with the given string. The given string doesn't need to be the same length as the range.",39,null],[11,"into_boxed_str","","Converts this `String` into a [`Box`]`<`[`str`]`>`.",39,{"inputs":[{"name":"self"}],"output":{"generics":["str"],"name":"box"}}],[11,"valid_up_to","pwasm_std::str","Returns the index in the given string up to which valid UTF-8 was verified.",30,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"error_len","","Provide more information about the failure:",30,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[11,"as_str","","View the underlying data as a subslice of the original data.",19,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"as_str","","View the underlying data as a subslice of the original data.",33,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"new","pwasm_std","Constructs a new, empty `Vec<T>`.",40,{"inputs":[],"output":{"name":"vec"}}],[11,"with_capacity","","Constructs a new, empty `Vec<T>` with the specified capacity.",40,{"inputs":[{"name":"usize"}],"output":{"name":"vec"}}],[11,"from_raw_parts","","Creates a `Vec<T>` directly from the raw components of another vector.",40,null],[11,"capacity","","Returns the number of elements the vector can hold without reallocating.",40,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"reserve","","Reserves capacity for at least `additional` more elements to be inserted in the given `Vec<T>`. The collection may reserve more space to avoid frequent reallocations. After calling `reserve`, capacity will be greater than or equal to `self.len() + additional`. Does nothing if capacity is already sufficient.",40,null],[11,"reserve_exact","","Reserves the minimum capacity for exactly `additional` more elements to be inserted in the given `Vec<T>`. After calling `reserve_exact`, capacity will be greater than or equal to `self.len() + additional`. Does nothing if the capacity is already sufficient.",40,null],[11,"shrink_to_fit","","Shrinks the capacity of the vector as much as possible.",40,null],[11,"into_boxed_slice","","Converts the vector into [`Box<[T]>`][owned slice].",40,{"inputs":[{"name":"self"}],"output":{"name":"box"}}],[11,"truncate","","Shortens the vector, keeping the first `len` elements and dropping the rest.",40,null],[11,"as_slice","","Extracts a slice containing the entire vector.",40,null],[11,"as_mut_slice","","Extracts a mutable slice of the entire vector.",40,null],[11,"set_len","","Sets the length of a vector.",40,null],[11,"swap_remove","","Removes an element from the vector and returns it.",40,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"t"}}],[11,"insert","","Inserts an element at position `index` within the vector, shifting all elements after it to the right.",40,null],[11,"remove","","Removes and returns the element at position `index` within the vector, shifting all elements after it to the left.",40,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"t"}}],[11,"retain","","Retains only the elements specified by the predicate.",40,null],[11,"dedup_by_key","","Removes all but the first of consecutive elements in the vector that resolve to the same key.",40,null],[11,"dedup_by","","Removes all but the first of consecutive elements in the vector satisfying a given equality relation.",40,null],[11,"push","","Appends an element to the back of a collection.",40,null],[11,"place_back","","Returns a place for insertion at the back of the `Vec`.",40,{"inputs":[{"name":"self"}],"output":{"name":"placeback"}}],[11,"pop","","Removes the last element from a vector and returns it, or [`None`] if it is empty.",40,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"append","","Moves all the elements of `other` into `Self`, leaving `other` empty.",40,null],[11,"drain","","Creates a draining iterator that removes the specified range in the vector and yields the removed items.",40,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"drain"}}],[11,"clear","","Clears the vector, removing all values.",40,null],[11,"len","","Returns the number of elements in the vector, also referred to as its 'length'.",40,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns `true` if the vector contains no elements.",40,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"split_off","","Splits the collection into two at the given index.",40,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"vec"}}],[11,"resize","","Resizes the `Vec` in-place so that `len` is equal to `new_len`.",40,null],[11,"extend_from_slice","","Clones and appends all elements in a slice to the `Vec`.",40,null],[11,"resize_default","","Resizes the `Vec` in-place so that `len` is equal to `new_len`.",40,null],[11,"dedup","","Removes consecutive repeated elements in the vector.",40,null],[11,"remove_item","","Removes the first instance of `item` from the vector if the item exists.",40,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"option"}}],[11,"splice","","Creates a splicing iterator that replaces the specified range in the vector with the given `replace_with` iterator and yields the removed items. `replace_with` does not need to be the same length as `range`.",40,{"inputs":[{"name":"self"},{"name":"r"},{"name":"i"}],"output":{"name":"splice"}}],[11,"drain_filter","","Creates an iterator which uses a closure to determine if an element should be removed.",40,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"drainfilter"}}],[11,"new","pwasm_std::hash","Create a new, zero-initialised, instance.",5,{"inputs":[],"output":{"name":"h32"}}],[11,"zero","","Synonym for `new()`. Prefer to new as it's more readable.",5,{"inputs":[],"output":{"name":"h32"}}],[11,"len","","Get the size of this object in bytes.",5,{"inputs":[],"output":{"name":"usize"}}],[11,"as_ptr","","Returns a constant raw pointer to the value",5,null],[11,"as_mut_ptr","","Returns a mutable raw pointer to the value",5,null],[11,"clone_from_slice","","Assign self to be of the same value as a slice of bytes of length `len()`.",5,null],[11,"from_slice","","Convert a slice of bytes of length `len()` to an instance of this type.",5,null],[11,"copy_to","","Copy the data of this object into some mutable slice of length `len()`.",5,null],[11,"contains","","Returns `true` if all bits set in `b` are also set in `self`.",5,{"inputs":[{"name":"self"},{"name":"h32"}],"output":{"name":"bool"}}],[11,"is_zero","","Returns `true` if no bits are set.",5,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"low_u64","","Returns the lowest 8 bytes interpreted as a BigEndian integer.",5,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"new","","Create a new, zero-initialised, instance.",6,{"inputs":[],"output":{"name":"h64"}}],[11,"zero","","Synonym for `new()`. Prefer to new as it's more readable.",6,{"inputs":[],"output":{"name":"h64"}}],[11,"len","","Get the size of this object in bytes.",6,{"inputs":[],"output":{"name":"usize"}}],[11,"as_ptr","","Returns a constant raw pointer to the value",6,null],[11,"as_mut_ptr","","Returns a mutable raw pointer to the value",6,null],[11,"clone_from_slice","","Assign self to be of the same value as a slice of bytes of length `len()`.",6,null],[11,"from_slice","","Convert a slice of bytes of length `len()` to an instance of this type.",6,null],[11,"copy_to","","Copy the data of this object into some mutable slice of length `len()`.",6,null],[11,"contains","","Returns `true` if all bits set in `b` are also set in `self`.",6,{"inputs":[{"name":"self"},{"name":"h64"}],"output":{"name":"bool"}}],[11,"is_zero","","Returns `true` if no bits are set.",6,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"low_u64","","Returns the lowest 8 bytes interpreted as a BigEndian integer.",6,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"new","","Create a new, zero-initialised, instance.",7,{"inputs":[],"output":{"name":"h128"}}],[11,"zero","","Synonym for `new()`. Prefer to new as it's more readable.",7,{"inputs":[],"output":{"name":"h128"}}],[11,"len","","Get the size of this object in bytes.",7,{"inputs":[],"output":{"name":"usize"}}],[11,"as_ptr","","Returns a constant raw pointer to the value",7,null],[11,"as_mut_ptr","","Returns a mutable raw pointer to the value",7,null],[11,"clone_from_slice","","Assign self to be of the same value as a slice of bytes of length `len()`.",7,null],[11,"from_slice","","Convert a slice of bytes of length `len()` to an instance of this type.",7,null],[11,"copy_to","","Copy the data of this object into some mutable slice of length `len()`.",7,null],[11,"contains","","Returns `true` if all bits set in `b` are also set in `self`.",7,{"inputs":[{"name":"self"},{"name":"h128"}],"output":{"name":"bool"}}],[11,"is_zero","","Returns `true` if no bits are set.",7,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"low_u64","","Returns the lowest 8 bytes interpreted as a BigEndian integer.",7,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"new","","Create a new, zero-initialised, instance.",8,{"inputs":[],"output":{"name":"h160"}}],[11,"zero","","Synonym for `new()`. Prefer to new as it's more readable.",8,{"inputs":[],"output":{"name":"h160"}}],[11,"len","","Get the size of this object in bytes.",8,{"inputs":[],"output":{"name":"usize"}}],[11,"as_ptr","","Returns a constant raw pointer to the value",8,null],[11,"as_mut_ptr","","Returns a mutable raw pointer to the value",8,null],[11,"clone_from_slice","","Assign self to be of the same value as a slice of bytes of length `len()`.",8,null],[11,"from_slice","","Convert a slice of bytes of length `len()` to an instance of this type.",8,null],[11,"copy_to","","Copy the data of this object into some mutable slice of length `len()`.",8,null],[11,"contains","","Returns `true` if all bits set in `b` are also set in `self`.",8,{"inputs":[{"name":"self"},{"name":"h160"}],"output":{"name":"bool"}}],[11,"is_zero","","Returns `true` if no bits are set.",8,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"low_u64","","Returns the lowest 8 bytes interpreted as a BigEndian integer.",8,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"new","","Create a new, zero-initialised, instance.",9,{"inputs":[],"output":{"name":"h256"}}],[11,"zero","","Synonym for `new()`. Prefer to new as it's more readable.",9,{"inputs":[],"output":{"name":"h256"}}],[11,"len","","Get the size of this object in bytes.",9,{"inputs":[],"output":{"name":"usize"}}],[11,"as_ptr","","Returns a constant raw pointer to the value",9,null],[11,"as_mut_ptr","","Returns a mutable raw pointer to the value",9,null],[11,"clone_from_slice","","Assign self to be of the same value as a slice of bytes of length `len()`.",9,null],[11,"from_slice","","Convert a slice of bytes of length `len()` to an instance of this type.",9,null],[11,"copy_to","","Copy the data of this object into some mutable slice of length `len()`.",9,null],[11,"contains","","Returns `true` if all bits set in `b` are also set in `self`.",9,{"inputs":[{"name":"self"},{"name":"h256"}],"output":{"name":"bool"}}],[11,"is_zero","","Returns `true` if no bits are set.",9,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"low_u64","","Returns the lowest 8 bytes interpreted as a BigEndian integer.",9,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"new","","Create a new, zero-initialised, instance.",10,{"inputs":[],"output":{"name":"h264"}}],[11,"zero","","Synonym for `new()`. Prefer to new as it's more readable.",10,{"inputs":[],"output":{"name":"h264"}}],[11,"len","","Get the size of this object in bytes.",10,{"inputs":[],"output":{"name":"usize"}}],[11,"as_ptr","","Returns a constant raw pointer to the value",10,null],[11,"as_mut_ptr","","Returns a mutable raw pointer to the value",10,null],[11,"clone_from_slice","","Assign self to be of the same value as a slice of bytes of length `len()`.",10,null],[11,"from_slice","","Convert a slice of bytes of length `len()` to an instance of this type.",10,null],[11,"copy_to","","Copy the data of this object into some mutable slice of length `len()`.",10,null],[11,"contains","","Returns `true` if all bits set in `b` are also set in `self`.",10,{"inputs":[{"name":"self"},{"name":"h264"}],"output":{"name":"bool"}}],[11,"is_zero","","Returns `true` if no bits are set.",10,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"low_u64","","Returns the lowest 8 bytes interpreted as a BigEndian integer.",10,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"new","","Create a new, zero-initialised, instance.",11,{"inputs":[],"output":{"name":"h512"}}],[11,"zero","","Synonym for `new()`. Prefer to new as it's more readable.",11,{"inputs":[],"output":{"name":"h512"}}],[11,"len","","Get the size of this object in bytes.",11,{"inputs":[],"output":{"name":"usize"}}],[11,"as_ptr","","Returns a constant raw pointer to the value",11,null],[11,"as_mut_ptr","","Returns a mutable raw pointer to the value",11,null],[11,"clone_from_slice","","Assign self to be of the same value as a slice of bytes of length `len()`.",11,null],[11,"from_slice","","Convert a slice of bytes of length `len()` to an instance of this type.",11,null],[11,"copy_to","","Copy the data of this object into some mutable slice of length `len()`.",11,null],[11,"contains","","Returns `true` if all bits set in `b` are also set in `self`.",11,{"inputs":[{"name":"self"},{"name":"h512"}],"output":{"name":"bool"}}],[11,"is_zero","","Returns `true` if no bits are set.",11,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"low_u64","","Returns the lowest 8 bytes interpreted as a BigEndian integer.",11,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"new","","Create a new, zero-initialised, instance.",12,{"inputs":[],"output":{"name":"h520"}}],[11,"zero","","Synonym for `new()`. Prefer to new as it's more readable.",12,{"inputs":[],"output":{"name":"h520"}}],[11,"len","","Get the size of this object in bytes.",12,{"inputs":[],"output":{"name":"usize"}}],[11,"as_ptr","","Returns a constant raw pointer to the value",12,null],[11,"as_mut_ptr","","Returns a mutable raw pointer to the value",12,null],[11,"clone_from_slice","","Assign self to be of the same value as a slice of bytes of length `len()`.",12,null],[11,"from_slice","","Convert a slice of bytes of length `len()` to an instance of this type.",12,null],[11,"copy_to","","Copy the data of this object into some mutable slice of length `len()`.",12,null],[11,"contains","","Returns `true` if all bits set in `b` are also set in `self`.",12,{"inputs":[{"name":"self"},{"name":"h520"}],"output":{"name":"bool"}}],[11,"is_zero","","Returns `true` if no bits are set.",12,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"low_u64","","Returns the lowest 8 bytes interpreted as a BigEndian integer.",12,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"new","","Create a new, zero-initialised, instance.",13,{"inputs":[],"output":{"name":"h1024"}}],[11,"zero","","Synonym for `new()`. Prefer to new as it's more readable.",13,{"inputs":[],"output":{"name":"h1024"}}],[11,"len","","Get the size of this object in bytes.",13,{"inputs":[],"output":{"name":"usize"}}],[11,"as_ptr","","Returns a constant raw pointer to the value",13,null],[11,"as_mut_ptr","","Returns a mutable raw pointer to the value",13,null],[11,"clone_from_slice","","Assign self to be of the same value as a slice of bytes of length `len()`.",13,null],[11,"from_slice","","Convert a slice of bytes of length `len()` to an instance of this type.",13,null],[11,"copy_to","","Copy the data of this object into some mutable slice of length `len()`.",13,null],[11,"contains","","Returns `true` if all bits set in `b` are also set in `self`.",13,{"inputs":[{"name":"self"},{"name":"h1024"}],"output":{"name":"bool"}}],[11,"is_zero","","Returns `true` if no bits are set.",13,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"low_u64","","Returns the lowest 8 bytes interpreted as a BigEndian integer.",13,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"new","","Create a new, zero-initialised, instance.",14,{"inputs":[],"output":{"name":"h2048"}}],[11,"zero","","Synonym for `new()`. Prefer to new as it's more readable.",14,{"inputs":[],"output":{"name":"h2048"}}],[11,"len","","Get the size of this object in bytes.",14,{"inputs":[],"output":{"name":"usize"}}],[11,"as_ptr","","Returns a constant raw pointer to the value",14,null],[11,"as_mut_ptr","","Returns a mutable raw pointer to the value",14,null],[11,"clone_from_slice","","Assign self to be of the same value as a slice of bytes of length `len()`.",14,null],[11,"from_slice","","Convert a slice of bytes of length `len()` to an instance of this type.",14,null],[11,"copy_to","","Copy the data of this object into some mutable slice of length `len()`.",14,null],[11,"contains","","Returns `true` if all bits set in `b` are also set in `self`.",14,{"inputs":[{"name":"self"},{"name":"h2048"}],"output":{"name":"bool"}}],[11,"is_zero","","Returns `true` if no bits are set.",14,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"low_u64","","Returns the lowest 8 bytes interpreted as a BigEndian integer.",14,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}]],"paths":[[8,"Pattern"],[4,"SearchStep"],[8,"Searcher"],[8,"ReverseSearcher"],[8,"FromStr"],[3,"H32"],[3,"H64"],[3,"H128"],[3,"H160"],[3,"H256"],[3,"H264"],[3,"H512"],[3,"H520"],[3,"H1024"],[3,"H2048"],[3,"WrappedArgs"],[3,"WrappedResult"],[3,"Box"],[3,"RSplit"],[3,"CharIndices"],[3,"CharSliceSearcher"],[3,"Matches"],[3,"LinesAny"],[3,"Bytes"],[3,"MatchIndices"],[3,"RSplitTerminator"],[3,"SplitN"],[3,"Split"],[3,"RMatchIndices"],[3,"StrSearcher"],[3,"Utf8Error"],[3,"RMatches"],[3,"RSplitN"],[3,"Chars"],[3,"CharPredicateSearcher"],[3,"SplitTerminator"],[3,"ParseBoolError"],[3,"Lines"],[3,"CharSearcher"],[3,"String"],[3,"Vec"],[3,"EncodeUtf16"],[3,"SplitWhitespace"]]};
initSearch(searchIndex);
